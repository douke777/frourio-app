generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  image     String?   @db.VarChar(300)
  role      Role      @default(USER)
  active    Boolean   @default(true)
  profile   Profile?
  posts     Post[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// TODO: 一般ユーザーと管理者ユーザーでテーブルを分ける
enum Role {
  USER
  ADMIN
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id]) // TODO: Cascade delete
  userId Int     @unique
}

model Post {
  id           Int       @id @default(autoincrement())
  title        String    @db.VarChar(50)
  content      String    @db.VarChar(255)
  published    Boolean   @default(false)
  author       User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     Int
  category     Category  @relation(fields: [categorySlug], references: [slug], onDelete: Cascade)
  categorySlug String
  likes        Like[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@index([authorId])
  @@index([categorySlug])
}

model Category {
  id        Int       @id @default(autoincrement())
  slug      String    @unique
  posts     Post[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Like {
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}
